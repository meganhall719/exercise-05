---
title: "Exercise_05"
format: html
editor: visual
---

## Challenge 1

### Step 1

loading data set as a tibble named "d"

```{r}
library(tidyverse)
d<-read_csv("https://raw.githubusercontent.com/difiore/ada-datasets/main/IMDB-movies.csv")
head(d)
class(d)
```

### Step 2

Creating a one-line statement to filter the dataset to include moves from 1920-1979 that are between 1-3 hours long.

```{r}
d <- d %>%
  filter(startYear >= 1920 & startYear <= 1979, 
         runtimeMinutes >= 60 & runtimeMinutes <= 180) %>%
  mutate(decade = paste0(substr(startYear, 3, 3), "0s"))
nrow(d)
```

### Step 3

Using {ggplot2} to plot histograms of the distribution of runtimeMinutes for each decade.

```{r}
library(ggplot2)
ggplot(data = d) + 
  geom_histogram(mapping = aes(x = runtimeMinutes)) + 
  facet_wrap(~ decade) + 
  ggtitle("Distribution of Movie Runtimes by Decade (1920-1979)") +
  xlab("Runtime (minutes)") + 
  ylab("Number of Movies")
```

### Step 4

A one-line statement to calculate the population mean and population standard deviation in runtimeMinutes for each decade and save the results in a new dataframe called results

```{r}
results <- d %>%
  group_by(decade) %>%
  summarize(mean_runtime = mean(runtimeMinutes),
            sd_runtime = sd(runtimeMinutes) * sqrt((n() - 1) / n()))
results
```

### Step 5

Drawing a single sample of 100 movies, without replacement, from each decade and calculate the single sample mean and single sample standard deviation in runtimeMinutes for each decades

```{r}
sample_results <- data.frame(decade = character(), 
                             sample_mean = numeric(),
                             sample_sd = numeric())

decades <- unique(d$decade)

for (dec in decades) {
 
  decade_movies <- d[d$decade == dec, ]
  sampled_movies <- sample_n(decade_movies, 100)
  
 
  mean_runtime <- mean(sampled_movies$runtimeMinutes)
  sd_runtime <- sd(sampled_movies$runtimeMinutes)
  
  
  new_row <- data.frame(decade = dec,
                        sample_mean = mean_runtime,
                        sample_sd = sd_runtime)
  
  sample_results <- rbind(sample_results, new_row)
}


sample_results
```

### Step 6

Calculate for each decade the standard error around your estimate of the population mean runtimeMinutes based on the standard deviation and sample size (n=100 movies) of your single sample.

```{r}
standard_error <- sample_results %>%
  mutate(standard_error = sample_sd / sqrt(100))
standard_error
```

### Step 7

Comparing those estimates for each decade and to the calculated standard error in the population mean for samples of size 100 based on the population standard deviation for each decade.

```{r}
results_with_SE <- results %>%
  mutate(theoretical_SE = sd_runtime / sqrt(100))

comparison <- standard_error %>%
  left_join(results_with_SE, by = "decade") %>%
  mutate(
    mean_difference = sample_mean - mean_runtime,
    SE_difference = standard_error - theoretical_SE
  )

comparison
```

###Step 8 Generate a sampling distribution of mean runtimeMinutes for each decade by \[a\] drawing 1000 random samples of 100 movies from each decade, without replacement, and, for each sample, \[b\] calculating the mean runtimeMinutes and the standard deviation in runtimeMinutes for each decade

```{r}
library(infer)

sampling_distributions <- d %>%
  group_by(decade) %>%
  nest() %>%
  mutate(
    samples = map(data, ~rep_sample_n(.x, size = 100, replace = FALSE, reps = 1000))
  ) %>%
  unnest(samples) %>%
  group_by(decade, replicate) %>%
  summarize(
    sample_mean = mean(runtimeMinutes),
    sample_sd = sd(runtimeMinutes),
    .groups = "drop"
  )

```

### Step 9

calculate the mean and the standard deviation of the sampling distribution of sample means for each decade

The shape of the sampling distributions are normal for each decade.This is because of what we learned in class "The Central Limit Theorem". We know as sample size increases the sampling distributions of a sample statistic will approach a normal distribution.

```{r}
sampling_dist_summary <- sampling_distributions %>%
  group_by(decade) %>%
  summarize(
    mean_of_sample_means = mean(sample_mean),
    sd_of_sample_means = sd(sample_mean)
  )

sampling_dist_summary

ggplot(sampling_distributions, aes(x = sample_mean)) +
  geom_histogram(bins = 30, fill = "purple", color = "red", alpha = 0.7) +
  facet_wrap(~ decade, ncol = 2) +
  geom_vline(data = sampling_dist_summary, 
             aes(xintercept = mean_of_sample_means), 
             color = "blue", linetype = "dashed", size = 1) +
  labs(title = "Sampling Distribution of Mean Runtimes by Decade",
       subtitle = "Red line indicates mean of sampling distribution",
       x = "Sample Mean (minutes)",
       y = "Frequency") +
  theme_minimal()

```

### Step 10

Compare the standard error in runtimeMinutes for samples of size 100 from each decade \[1\] as estimated from your first sample of 100 movies, \[2\] as calculated from the known population standard deviations for each decade, and \[3\] as estimated from the sampling distribution of sample means for each decade.

```{r}

final_comparison <- comparison %>%
  select(decade, standard_error, theoretical_SE) %>%
  rename(
    sample_SE = standard_error,   
    
    population_SE = theoretical_SE
  ) %>%
  left_join(
    sampling_dist_summary %>%
      select(decade, sd_of_sample_means) %>%
      rename(sampling_dist_SE = sd_of_sample_means),
    by = "decade"
  )


final_comparison

# [1]
ggplot(final_comparison, aes(x = sample_SE)) +
  geom_histogram(bins = 6, fill = "blue") +
  labs(
    title = "1. Standard Error Estimated from First Sample of 100 Movies",
    x = "Standard Error (minutes)",
    y = "Frequency"
  ) +
  theme_minimal()

# [2]
ggplot(final_comparison, aes(x = population_SE)) +
  geom_histogram(bins = 6, fill = "red") +
  labs(
    title = "2. Standard Error Calculated from Population Standard Deviations",
    x = "Standard Error (minutes)",
    y = "Frequency"
  ) +
  theme_minimal()

# [3]
ggplot(final_comparison, aes(x = sampling_dist_SE)) +
  geom_histogram(bins = 6, fill = "green") +
  labs(
    title = "3. Standard Error Estimated from Sampling Distribution",
    x = "Standard Error (minutes)",
    y = "Frequency"
  ) +
  theme_minimal()
```

## Challenge 2

### Step 1

loading data as a tibble named z

```{r}
library(tidyverse)
z<-read_csv("https://raw.githubusercontent.com/difiore/ada-datasets/main/zombies.csv")
head(z)
class(z)
```

### Step 2

Calculating the Population mean and standard deviation for each random variable

```{r}
height_mean <- mean(z$height)
weight_mean <- mean(z$weight)
age_mean <- mean(z$age)
zombies_killed_mean <- mean(z$zombies_killed)
education_mean <- mean(z$years_of_education)


N <- nrow(z)


height_sd <- sqrt(sum((z$height - height_mean)^2) / N)


weight_sd <- sqrt(sum((z$weight - weight_mean)^2) / N)


age_sd <- sqrt(sum((z$age - age_mean)^2) / N)

zombies_killed_sd <- sqrt(sum((z$zombies_killed - zombies_killed_mean)^2) / N)

education_sd <- sqrt(sum((z$years_of_education - education_mean)^2) / N)

results <- data.frame(
  Variable = c("Height", "Weight", "Age", "Zombies Killed", "Years of Education"),
  Mean = c(height_mean, weight_mean, age_mean, zombies_killed_mean, education_mean),
  SD = c(height_sd, weight_sd, age_sd, zombies_killed_sd, education_sd)
)

print(results)
```

### Step 3

Making box plots of each of these variables by gender.

```{r}
library(ggplot2)
height_plot <- ggplot(z, aes(x = gender, y = height, fill = gender)) +
  geom_boxplot() +
  labs(title = "Height by Gender",
       x = "Gender",
       y = "Height") +
  theme_minimal()

weight_plot <- ggplot(z, aes(x = gender, y = weight, fill = gender)) +
  geom_boxplot() +
  labs(title = "Weight by Gender",
       x = "Gender",
       y = "Weight") +
  theme_minimal()

age_plot <- ggplot(z, aes(x = gender, y = age, fill = gender)) +
  geom_boxplot() +
  labs(title = "Age by Gender",
       x = "Gender",
       y = "Age") +
  theme_minimal()

zombies_plot <- ggplot(z, aes(x = gender, y = zombies_killed, fill = gender)) +
  geom_boxplot() +
  labs(title = "Zombies Killed by Gender",
       x = "Gender",
       y = "Zombies Killed") +
  theme_minimal()

education_plot <- ggplot(z, aes(x = gender, y = years_of_education, fill = gender)) +
  geom_boxplot() +
  labs(title = "Years of Education by Gender",
       x = "Gender",
       y = "Years of Education") +
  theme_minimal()


print(height_plot)
print(weight_plot)
print(age_plot)
print(zombies_plot)
print(education_plot)
```

### Step 4

Using {ggplot} to make scatterplots of height and weight in relation to age (i.e., use age as the variable), using different colored points for males (blue) versus females(pink)

```{r}

height_age_plot <- ggplot(z, aes(x = age, y = height, color = gender)) +
  geom_point() +
  labs(title = "Height vs Age by Gender",
       x = "Age (years)",
       y = "Height (cm)") +
  theme_minimal()


weight_age_plot <- ggplot(z, aes(x = age, y = weight, color = gender)) +
  geom_point() +
  labs(title = "Weight vs Age by Gender",
       x = "Age (years)",
       y = "Weight (kg)") +
  theme_minimal()


print(height_age_plot)
print(weight_age_plot)

scale_color_discrete(values = c("pink", "blue"))
```

Q ? Do these variables seem to be related? In what way? A: To me it appears that height and weight are positively correlated with age, but height shows a stronger relationship. Also the males seems to be both taller and heavier on average so my interpretation is the majority of the zombie Apocalypse survivors are between the ages of 17-25 male and female

### Step 5

using histograms and Q-Q plots

Years of Educations and Zombies Killed are NOT DRAWN FROM A NORMAL DISTRIBUTION.

```{r}

library(tidyverse)

height_hist <- ggplot(z, aes(x = height)) +
  geom_histogram(bins = 20, fill = "blue") +
  labs(title = "Histogram of Height",
       x = "Height (cm)",
       y = "Count")

height_qq <- ggplot(z, aes(sample = height)) +
  geom_qq() +
  geom_qq_line() +
  labs(title = "Q-Q Plot of Height")

weight_hist <- ggplot(z, aes(x = weight)) +
  geom_histogram(bins = 20, fill = "green") +
  labs(title = "Histogram of Weight",
       x = "Weight (kg)",
       y = "Count")

weight_qq <- ggplot(z, aes(sample = weight)) +
  geom_qq() +
  geom_qq_line() +
  labs(title = "Q-Q Plot of Weight")

age_hist <- ggplot(z, aes(x = age)) +
  geom_histogram(bins = 20, fill = "red") +
  labs(title = "Histogram of Age",
       x = "Age (years)",
       y = "Count")

age_qq <- ggplot(z, aes(sample = age)) +
  geom_qq() +
  geom_qq_line() +
  labs(title = "Q-Q Plot of Age")

zombies_hist <- ggplot(z, aes(x = zombies_killed)) +
  geom_histogram(bins = 20, fill = "purple") +
  labs(title = "Histogram of Zombies Killed",
       x = "Zombies Killed",
       y = "Count")

zombies_qq <- ggplot(z, aes(sample = zombies_killed)) +
  geom_qq() +
  geom_qq_line() +
  labs(title = "Q-Q Plot of Zombies Killed")

education_hist <- ggplot(z, aes(x = years_of_education)) +
  geom_histogram(bins = 20, fill = "orange") +
  labs(title = "Histogram of Years of Education",
       x = "Years of Education",
       y = "Count")

education_qq <- ggplot(z, aes(sample = years_of_education)) +
  geom_qq() +
  geom_qq_line() +
  labs(title = "Q-Q Plot of Years of Education")

print(height_hist)
print(height_qq)
print(weight_hist)
print(weight_qq)
print(age_hist)
print(age_qq)
print(zombies_hist)
print(zombies_qq)
print(education_hist)
print(education_qq)
```

### Step 6

Now use the sample_n() or slice_sample() function from {dplyr} to sample ONE subset of 50 zombie apocalypse survivors (without replacement) from this population and calculate the mean and sample standard deviation for each variable. Also estimate the standard error for each variable based on this one sample and use that to construct a theoretical 95% confidence interval for each mean. You can use either the standard normal or a Student’s t distribution to derive the critical values needed to calculate the lower and upper limits of the CI.

```{r}

sample_survivors <- slice_sample(z, n = 50)

sample_stats <- sample_survivors %>%
  summarise(
    # Height
    height_mean = mean(height),
    height_sd = sd(height),
    height_se = sd(height) / sqrt(50),
    height_lower = height_mean - qt(0.975, 49) * height_se,
    height_upper = height_mean + qt(0.975, 49) * height_se,
    
    # Weight
    weight_mean = mean(weight),
    weight_sd = sd(weight),
    weight_se = sd(weight) / sqrt(50),
    weight_lower = weight_mean - qt(0.975, 49) * weight_se,
    weight_upper = weight_mean + qt(0.975, 49) * weight_se,
    
    # Age
    age_mean = mean(age),
    age_sd = sd(age),
    age_se = sd(age) / sqrt(50),
    age_lower = age_mean - qt(0.975, 49) * age_se,
    age_upper = age_mean + qt(0.975, 49) * age_se,
    
    # Zombies killed
    zombies_mean = mean(zombies_killed),
    zombies_sd = sd(zombies_killed),
    zombies_se = sd(zombies_killed) / sqrt(50),
    zombies_lower = zombies_mean - qt(0.975, 49) * zombies_se,
    zombies_upper = zombies_mean + qt(0.975, 49) * zombies_se,
    
    # Years of education
    education_mean = mean(years_of_education),
    education_sd = sd(years_of_education),
    education_se = sd(years_of_education) / sqrt(50),
    education_lower = education_mean - qt(0.975, 49) * education_se,
    education_upper = education_mean + qt(0.975, 49) * education_se
  )

result_height <- data.frame(
  Variable = "Height",
  Mean = sample_stats$height_mean,
  SD = sample_stats$height_sd,
  SE = sample_stats$height_se,
  CI_Lower = sample_stats$height_lower,
  CI_Upper = sample_stats$height_upper
)

result_weight <- data.frame(
  Variable = "Weight",
  Mean = sample_stats$weight_mean,
  SD = sample_stats$weight_sd,
  SE = sample_stats$weight_se,
  CI_Lower = sample_stats$weight_lower,
  CI_Upper = sample_stats$weight_upper
)

result_age <- data.frame(
  Variable = "Age",
  Mean = sample_stats$age_mean,
  SD = sample_stats$age_sd,
  SE = sample_stats$age_se,
  CI_Lower = sample_stats$age_lower,
  CI_Upper = sample_stats$age_upper
)

result_zombies <- data.frame(
  Variable = "Zombies Killed",
  Mean = sample_stats$zombies_mean,
  SD = sample_stats$zombies_sd,
  SE = sample_stats$zombies_se,
  CI_Lower = sample_stats$zombies_lower,
  CI_Upper = sample_stats$zombies_upper
)

result_education <- data.frame(
  Variable = "Years of Education",
  Mean = sample_stats$education_mean,
  SD = sample_stats$education_sd,
  SE = sample_stats$education_se,
  CI_Lower = sample_stats$education_lower,
  CI_Upper = sample_stats$education_upper
)


results_table <- rbind(result_height, result_weight, result_age, result_zombies, result_education)

print(results_table)

```

### Step 7 Drawing 199 more samples and analyzing the sampling distribution

***What are the means and standard deviations of the sampling distribution for each variable?***

The sampling distribution means and standard deviations are:Height: Mean = 67.62, SD = 0.56 Weight: Mean = 143.86, SD = 2.29 Age: Mean = 20.02, SD = 0.43 Zombies Killed: Mean = 3.01, SD = 0.25 Years of Education: Mean = 3.04, SD = 0.22

***How do the standard deviations of the sampling distribution compare to the standard errors from your first sample?***

They're very similar! we see the Height: Sampling SD = 0.56, First sample SE = 0.55 This similarity tells us that the standard error calculated from a single sample is a good estimate of how sample means vary.

```{r}

get_sample_means <- function() {
  sample_data <- slice_sample(z, n = 50)
  return(c(
    height = mean(sample_data$height),
    weight = mean(sample_data$weight),
    age = mean(sample_data$age),
    zombies_killed = mean(sample_data$zombies_killed),
    years_of_education = mean(sample_data$years_of_education)
  ))
}



sample_means_list <- replicate(199, get_sample_means(), simplify = FALSE)


sample_means_df <- bind_rows(sample_means_list) 

first_sample_means <- data.frame(
  height = sample_stats$height_mean,
  weight = sample_stats$weight_mean,
  age = sample_stats$age_mean,
  zombies_killed = sample_stats$zombies_mean,
  years_of_education = sample_stats$education_mean
)

all_sample_means <- bind_rows(first_sample_means, sample_means_df)

sampling_dist_summary <- all_sample_means %>%
  summarise(across(everything(), 
                  list(mean = mean, sd = sd),
                  .names = "{.col}_{.fn}"))

comparison <- data.frame(
  Variable = c("Height", "Weight", "Age", "Zombies Killed", "Years of Education"),
  Sampling_Dist_SD = c(
    sampling_dist_summary$height_sd,
    sampling_dist_summary$weight_sd,
    sampling_dist_summary$age_sd,
    sampling_dist_summary$zombies_killed_sd,
    sampling_dist_summary$years_of_education_sd
  ),
  First_Sample_SE = c(
    sample_stats$height_se,
    sample_stats$weight_se,
    sample_stats$age_se,
    sample_stats$zombies_se,
    sample_stats$education_se
  )
)

print(sampling_dist_summary)
print(comparison)
```

### Step 8 Plotting the sampling distributions

***What do they look like?***

All five sampling distributions appear to have a bell-shaped curve and they also appear to have a normal distribution

***Are they normally distributed?***

I say yes they are

***What about for variables that were not originally normally distributed?***

In step 5, I said that "YearsofEducation" and "Zombies Killed" were not normally distributed, but looking at them now they are.

```{r}

sample_means_long <- all_sample_means %>%
  pivot_longer(cols = everything(), 
               names_to = "variable", 
               values_to = "mean_value")

ggplot(sample_means_long, aes(x = mean_value)) +
  geom_histogram(aes(y = ..density..), bins = 30, fill = "lightblue", color = "black") +
  geom_density(color = "red", linewidth = 1) +
  facet_wrap(~ variable, scales = "free") +
  labs(title = "Sampling Distributions of Means (n=50)",
       x = "Sample Mean",
       y = "Density") +
  theme_minimal()


variables <- unique(sample_means_long$variable)

create_qq_plot <- function(var_name) {
  data_subset <- filter(sample_means_long, variable == var_name)
  ggplot(data_subset, aes(sample = mean_value)) +
    geom_qq() +
    geom_qq_line() +
    labs(title = paste("Q-Q Plot for", var_name),
         x = "Theoretical Quantiles",
         y = "Sample Quantiles") +
    theme_minimal()
}

qq_plots <- lapply(variables, create_qq_plot)
for(plot in qq_plots) {
  print(plot)
}
```

### Step 9 Constructing confidence intervals from the sampling distribution

```{r}
ci_from_sampling_dist <- all_sample_means %>%
  summarise(across(everything(),
                  list(
                    mean = mean,
                    lower_ci = ~quantile(.x, 0.025),
                    upper_ci = ~quantile(.x, 0.975)
                  ),
                  .names = "{.col}_{.fn}"))

ci_sampling_comparison <- data.frame(
  Variable = c("Height", "Weight", "Age", "Zombies Killed", "Years of Education"),
  
  Sampling_Mean = c(
    ci_from_sampling_dist$height_mean,
    ci_from_sampling_dist$weight_mean,
    ci_from_sampling_dist$age_mean,
    ci_from_sampling_dist$zombies_killed_mean,
    ci_from_sampling_dist$years_of_education_mean
  ),
  Sampling_Lower_CI = c(
    ci_from_sampling_dist$height_lower_ci,
    ci_from_sampling_dist$weight_lower_ci,
    ci_from_sampling_dist$age_lower_ci,
    ci_from_sampling_dist$zombies_killed_lower_ci,
    ci_from_sampling_dist$years_of_education_lower_ci
  ),
  Sampling_Upper_CI = c(
    ci_from_sampling_dist$height_upper_ci,
    ci_from_sampling_dist$weight_upper_ci,
    ci_from_sampling_dist$age_upper_ci,
    ci_from_sampling_dist$zombies_killed_upper_ci,
    ci_from_sampling_dist$years_of_education_upper_ci
  ),
  
  First_Sample_Mean = c(
    sample_stats$height_mean,
    sample_stats$weight_mean,
    sample_stats$age_mean,
    sample_stats$zombies_mean,
    sample_stats$education_mean
  ),
  First_Sample_Lower_CI = c(
    sample_stats$height_lower,
    sample_stats$weight_lower,
    sample_stats$age_lower,
    sample_stats$zombies_lower,
    sample_stats$education_lower
  ),
  First_Sample_Upper_CI = c(
    sample_stats$height_upper,
    sample_stats$weight_upper,
    sample_stats$age_upper,
    sample_stats$zombies_upper,
    sample_stats$education_upper
  )
)

print(ci_sampling_comparison)

ci_from_sampling_se <- data.frame(
  Variable = c("Height", "Weight", "Age", "Zombies Killed", "Years of Education"),
  Mean = c(
    sampling_dist_summary$height_mean,
    sampling_dist_summary$weight_mean,
    sampling_dist_summary$age_mean,
    sampling_dist_summary$zombies_killed_mean,
    sampling_dist_summary$years_of_education_mean
  ),
  SE = c(
    sampling_dist_summary$height_sd,
    sampling_dist_summary$weight_sd,
    sampling_dist_summary$age_sd,
    sampling_dist_summary$zombies_killed_sd,
    sampling_dist_summary$years_of_education_sd
  )
)

ci_from_sampling_se <- ci_from_sampling_se %>%
  mutate(
    Lower_CI = Mean - qt(0.975, 49) * SE,
    Upper_CI = Mean + qt(0.975, 49) * SE
  )

print(ci_from_sampling_se)
```

### Step 10

I really don't understand how to do this step
